<?php
/**
 * ImageSaveOptions
 *
 * PHP version 5
 *
 * @category Class
 * @package  Aspose\Diagram\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Aspose.Diagram Cloud API Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Aspose\Diagram\Cloud\Model;
use \Aspose\Diagram\Cloud\ObjectSerializer;

/**
 * ImageSaveOptions Class Doc Comment
 *
 * @category Class
 * @package  Aspose\Diagram\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ImageSaveOptions extends RenderingSaveOptions 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ImageSaveOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'image_brightness' => 'double',
        'image_contrast' => 'double',
        'jpeg_quality' => 'int',
        'page_count' => 'int',
        'resolution' => 'double',
        'scale' => 'double',
        'tiff_compression' => 'string',
        'export_hidden_page' => 'bool',
        'image_color_mode' => 'string',
        'page_index' => 'int',
        'save_foreground_pages_only' => 'bool',
        'same_as_pdf_conversion_area' => 'bool',
        'pixel_offset_mode' => 'string',
        'smoothing_mode' => 'string',
        'compositing_quality' => 'string',
        'interpolation_mode' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'image_brightness' => 'double',
        'image_contrast' => 'double',
        'jpeg_quality' => 'int32',
        'page_count' => 'int32',
        'resolution' => 'double',
        'scale' => 'double',
        'tiff_compression' => null,
        'export_hidden_page' => null,
        'image_color_mode' => null,
        'page_index' => 'int32',
        'save_foreground_pages_only' => null,
        'same_as_pdf_conversion_area' => null,
        'pixel_offset_mode' => null,
        'smoothing_mode' => null,
        'compositing_quality' => null,
        'interpolation_mode' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'image_brightness' => 'ImageBrightness',
        'image_contrast' => 'ImageContrast',
        'jpeg_quality' => 'JpegQuality',
        'page_count' => 'PageCount',
        'resolution' => 'Resolution',
        'scale' => 'Scale',
        'tiff_compression' => 'TiffCompression',
        'export_hidden_page' => 'ExportHiddenPage',
        'image_color_mode' => 'ImageColorMode',
        'page_index' => 'PageIndex',
        'save_foreground_pages_only' => 'SaveForegroundPagesOnly',
        'same_as_pdf_conversion_area' => 'SameAsPdfConversionArea',
        'pixel_offset_mode' => 'PixelOffsetMode',
        'smoothing_mode' => 'SmoothingMode',
        'compositing_quality' => 'CompositingQuality',
        'interpolation_mode' => 'InterpolationMode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'image_brightness' => 'setImageBrightness',
        'image_contrast' => 'setImageContrast',
        'jpeg_quality' => 'setJpegQuality',
        'page_count' => 'setPageCount',
        'resolution' => 'setResolution',
        'scale' => 'setScale',
        'tiff_compression' => 'setTiffCompression',
        'export_hidden_page' => 'setExportHiddenPage',
        'image_color_mode' => 'setImageColorMode',
        'page_index' => 'setPageIndex',
        'save_foreground_pages_only' => 'setSaveForegroundPagesOnly',
        'same_as_pdf_conversion_area' => 'setSameAsPdfConversionArea',
        'pixel_offset_mode' => 'setPixelOffsetMode',
        'smoothing_mode' => 'setSmoothingMode',
        'compositing_quality' => 'setCompositingQuality',
        'interpolation_mode' => 'setInterpolationMode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'image_brightness' => 'getImageBrightness',
        'image_contrast' => 'getImageContrast',
        'jpeg_quality' => 'getJpegQuality',
        'page_count' => 'getPageCount',
        'resolution' => 'getResolution',
        'scale' => 'getScale',
        'tiff_compression' => 'getTiffCompression',
        'export_hidden_page' => 'getExportHiddenPage',
        'image_color_mode' => 'getImageColorMode',
        'page_index' => 'getPageIndex',
        'save_foreground_pages_only' => 'getSaveForegroundPagesOnly',
        'same_as_pdf_conversion_area' => 'getSameAsPdfConversionArea',
        'pixel_offset_mode' => 'getPixelOffsetMode',
        'smoothing_mode' => 'getSmoothingMode',
        'compositing_quality' => 'getCompositingQuality',
        'interpolation_mode' => 'getInterpolationMode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TIFF_COMPRESSION_NONE = 'None';
    const TIFF_COMPRESSION_RLE = 'Rle';
    const TIFF_COMPRESSION_CCITT3 = 'Ccitt3';
    const TIFF_COMPRESSION_CCITT4 = 'Ccitt4';
    const TIFF_COMPRESSION_LZW = 'Lzw';
    const IMAGE_COLOR_MODE_NONE = 'None';
    const IMAGE_COLOR_MODE_GRAYSCALE = 'Grayscale';
    const IMAGE_COLOR_MODE_BLACK_AND_WHITE = 'BlackAndWhite';
    const PIXEL_OFFSET_MODE__DEFAULT = 'Default';
    const PIXEL_OFFSET_MODE_HIGH_SPEED = 'HighSpeed';
    const PIXEL_OFFSET_MODE_HIGH_QUALITY = 'HighQuality';
    const PIXEL_OFFSET_MODE_NONE = 'None';
    const PIXEL_OFFSET_MODE_HALF = 'Half';
    const PIXEL_OFFSET_MODE_INVALID = 'Invalid';
    const SMOOTHING_MODE__DEFAULT = 'Default';
    const SMOOTHING_MODE_HIGH_SPEED = 'HighSpeed';
    const SMOOTHING_MODE_HIGH_QUALITY = 'HighQuality';
    const SMOOTHING_MODE_NONE = 'None';
    const SMOOTHING_MODE_ANTI_ALIAS = 'AntiAlias';
    const SMOOTHING_MODE_INVALID = 'Invalid';
    const COMPOSITING_QUALITY__DEFAULT = 'Default';
    const COMPOSITING_QUALITY_HIGH_SPEED = 'HighSpeed';
    const COMPOSITING_QUALITY_HIGH_QUALITY = 'HighQuality';
    const COMPOSITING_QUALITY_GAMMA_CORRECTED = 'GammaCorrected';
    const COMPOSITING_QUALITY_ASSUME_LINEAR = 'AssumeLinear';
    const COMPOSITING_QUALITY_INVALID = 'Invalid';
    const INTERPOLATION_MODE__DEFAULT = 'Default';
    const INTERPOLATION_MODE_LOW = 'Low';
    const INTERPOLATION_MODE_HIGH = 'High';
    const INTERPOLATION_MODE_BILINEAR = 'Bilinear';
    const INTERPOLATION_MODE_BICUBIC = 'Bicubic';
    const INTERPOLATION_MODE_NEAREST_NEIGHBOR = 'NearestNeighbor';
    const INTERPOLATION_MODE_HIGH_QUALITY_BILINEAR = 'HighQualityBilinear';
    const INTERPOLATION_MODE_HIGH_QUALITY_BICUBIC = 'HighQualityBicubic';
    const INTERPOLATION_MODE_INVALID = 'Invalid';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTiffCompressionAllowableValues()
    {
        return [
            self::TIFF_COMPRESSION_NONE,
            self::TIFF_COMPRESSION_RLE,
            self::TIFF_COMPRESSION_CCITT3,
            self::TIFF_COMPRESSION_CCITT4,
            self::TIFF_COMPRESSION_LZW,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getImageColorModeAllowableValues()
    {
        return [
            self::IMAGE_COLOR_MODE_NONE,
            self::IMAGE_COLOR_MODE_GRAYSCALE,
            self::IMAGE_COLOR_MODE_BLACK_AND_WHITE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPixelOffsetModeAllowableValues()
    {
        return [
            self::PIXEL_OFFSET_MODE__DEFAULT,
            self::PIXEL_OFFSET_MODE_HIGH_SPEED,
            self::PIXEL_OFFSET_MODE_HIGH_QUALITY,
            self::PIXEL_OFFSET_MODE_NONE,
            self::PIXEL_OFFSET_MODE_HALF,
            self::PIXEL_OFFSET_MODE_INVALID,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSmoothingModeAllowableValues()
    {
        return [
            self::SMOOTHING_MODE__DEFAULT,
            self::SMOOTHING_MODE_HIGH_SPEED,
            self::SMOOTHING_MODE_HIGH_QUALITY,
            self::SMOOTHING_MODE_NONE,
            self::SMOOTHING_MODE_ANTI_ALIAS,
            self::SMOOTHING_MODE_INVALID,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCompositingQualityAllowableValues()
    {
        return [
            self::COMPOSITING_QUALITY__DEFAULT,
            self::COMPOSITING_QUALITY_HIGH_SPEED,
            self::COMPOSITING_QUALITY_HIGH_QUALITY,
            self::COMPOSITING_QUALITY_GAMMA_CORRECTED,
            self::COMPOSITING_QUALITY_ASSUME_LINEAR,
            self::COMPOSITING_QUALITY_INVALID,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInterpolationModeAllowableValues()
    {
        return [
            self::INTERPOLATION_MODE__DEFAULT,
            self::INTERPOLATION_MODE_LOW,
            self::INTERPOLATION_MODE_HIGH,
            self::INTERPOLATION_MODE_BILINEAR,
            self::INTERPOLATION_MODE_BICUBIC,
            self::INTERPOLATION_MODE_NEAREST_NEIGHBOR,
            self::INTERPOLATION_MODE_HIGH_QUALITY_BILINEAR,
            self::INTERPOLATION_MODE_HIGH_QUALITY_BICUBIC,
            self::INTERPOLATION_MODE_INVALID,
        ];
    }
    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['image_brightness'] = isset($data['image_brightness']) ? $data['image_brightness'] : null;
        $this->container['image_contrast'] = isset($data['image_contrast']) ? $data['image_contrast'] : null;
        $this->container['jpeg_quality'] = isset($data['jpeg_quality']) ? $data['jpeg_quality'] : null;
        $this->container['page_count'] = isset($data['page_count']) ? $data['page_count'] : null;
        $this->container['resolution'] = isset($data['resolution']) ? $data['resolution'] : null;
        $this->container['scale'] = isset($data['scale']) ? $data['scale'] : null;
        $this->container['tiff_compression'] = isset($data['tiff_compression']) ? $data['tiff_compression'] : null;
        $this->container['export_hidden_page'] = isset($data['export_hidden_page']) ? $data['export_hidden_page'] : null;
        $this->container['image_color_mode'] = isset($data['image_color_mode']) ? $data['image_color_mode'] : null;
        $this->container['page_index'] = isset($data['page_index']) ? $data['page_index'] : null;
        $this->container['save_foreground_pages_only'] = isset($data['save_foreground_pages_only']) ? $data['save_foreground_pages_only'] : null;
        $this->container['same_as_pdf_conversion_area'] = isset($data['same_as_pdf_conversion_area']) ? $data['same_as_pdf_conversion_area'] : null;
        $this->container['pixel_offset_mode'] = isset($data['pixel_offset_mode']) ? $data['pixel_offset_mode'] : null;
        $this->container['smoothing_mode'] = isset($data['smoothing_mode']) ? $data['smoothing_mode'] : null;
        $this->container['compositing_quality'] = isset($data['compositing_quality']) ? $data['compositing_quality'] : null;
        $this->container['interpolation_mode'] = isset($data['interpolation_mode']) ? $data['interpolation_mode'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        $allowedValues = $this->getTiffCompressionAllowableValues();
        if (!in_array($this->container['tiff_compression'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'tiff_compression', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getImageColorModeAllowableValues();
        if (!in_array($this->container['image_color_mode'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'image_color_mode', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPixelOffsetModeAllowableValues();
        if (!in_array($this->container['pixel_offset_mode'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'pixel_offset_mode', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSmoothingModeAllowableValues();
        if (!in_array($this->container['smoothing_mode'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'smoothing_mode', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCompositingQualityAllowableValues();
        if (!in_array($this->container['compositing_quality'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'compositing_quality', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getInterpolationModeAllowableValues();
        if (!in_array($this->container['interpolation_mode'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'interpolation_mode', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if (!parent::valid()) {
            return false;
        }

        $allowedValues = $this->getTiffCompressionAllowableValues();
        if (!in_array($this->container['tiff_compression'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getImageColorModeAllowableValues();
        if (!in_array($this->container['image_color_mode'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getPixelOffsetModeAllowableValues();
        if (!in_array($this->container['pixel_offset_mode'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getSmoothingModeAllowableValues();
        if (!in_array($this->container['smoothing_mode'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getCompositingQualityAllowableValues();
        if (!in_array($this->container['compositing_quality'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getInterpolationModeAllowableValues();
        if (!in_array($this->container['interpolation_mode'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets image_brightness
     *
     * @return double
     */
    public function getImageBrightness()
    {
        return $this->container['image_brightness'];
    }

    /**
     * Sets image_brightness
     *
     * @param double $image_brightness image_brightness
     *
     * @return $this
     */
    public function setImageBrightness($image_brightness)
    {
        $this->container['image_brightness'] = $image_brightness;

        return $this;
    }

    /**
     * Gets image_contrast
     *
     * @return double
     */
    public function getImageContrast()
    {
        return $this->container['image_contrast'];
    }

    /**
     * Sets image_contrast
     *
     * @param double $image_contrast image_contrast
     *
     * @return $this
     */
    public function setImageContrast($image_contrast)
    {
        $this->container['image_contrast'] = $image_contrast;

        return $this;
    }

    /**
     * Gets jpeg_quality
     *
     * @return int
     */
    public function getJpegQuality()
    {
        return $this->container['jpeg_quality'];
    }

    /**
     * Sets jpeg_quality
     *
     * @param int $jpeg_quality jpeg_quality
     *
     * @return $this
     */
    public function setJpegQuality($jpeg_quality)
    {
        $this->container['jpeg_quality'] = $jpeg_quality;

        return $this;
    }

    /**
     * Gets page_count
     *
     * @return int
     */
    public function getPageCount()
    {
        return $this->container['page_count'];
    }

    /**
     * Sets page_count
     *
     * @param int $page_count page_count
     *
     * @return $this
     */
    public function setPageCount($page_count)
    {
        $this->container['page_count'] = $page_count;

        return $this;
    }

    /**
     * Gets resolution
     *
     * @return double
     */
    public function getResolution()
    {
        return $this->container['resolution'];
    }

    /**
     * Sets resolution
     *
     * @param double $resolution resolution
     *
     * @return $this
     */
    public function setResolution($resolution)
    {
        $this->container['resolution'] = $resolution;

        return $this;
    }

    /**
     * Gets scale
     *
     * @return double
     */
    public function getScale()
    {
        return $this->container['scale'];
    }

    /**
     * Sets scale
     *
     * @param double $scale scale
     *
     * @return $this
     */
    public function setScale($scale)
    {
        $this->container['scale'] = $scale;

        return $this;
    }

    /**
     * Gets tiff_compression
     *
     * @return string
     */
    public function getTiffCompression()
    {
        return $this->container['tiff_compression'];
    }

    /**
     * Sets tiff_compression
     *
     * @param string $tiff_compression tiff_compression
     *
     * @return $this
     */
    public function setTiffCompression($tiff_compression)
    {
        $allowedValues = $this->getTiffCompressionAllowableValues();
        if (!is_null($tiff_compression) && !in_array($tiff_compression, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'tiff_compression', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tiff_compression'] = $tiff_compression;

        return $this;
    }

    /**
     * Gets export_hidden_page
     *
     * @return bool
     */
    public function getExportHiddenPage()
    {
        return $this->container['export_hidden_page'];
    }

    /**
     * Sets export_hidden_page
     *
     * @param bool $export_hidden_page export_hidden_page
     *
     * @return $this
     */
    public function setExportHiddenPage($export_hidden_page)
    {
        $this->container['export_hidden_page'] = $export_hidden_page;

        return $this;
    }

    /**
     * Gets image_color_mode
     *
     * @return string
     */
    public function getImageColorMode()
    {
        return $this->container['image_color_mode'];
    }

    /**
     * Sets image_color_mode
     *
     * @param string $image_color_mode image_color_mode
     *
     * @return $this
     */
    public function setImageColorMode($image_color_mode)
    {
        $allowedValues = $this->getImageColorModeAllowableValues();
        if (!is_null($image_color_mode) && !in_array($image_color_mode, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'image_color_mode', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['image_color_mode'] = $image_color_mode;

        return $this;
    }

    /**
     * Gets page_index
     *
     * @return int
     */
    public function getPageIndex()
    {
        return $this->container['page_index'];
    }

    /**
     * Sets page_index
     *
     * @param int $page_index page_index
     *
     * @return $this
     */
    public function setPageIndex($page_index)
    {
        $this->container['page_index'] = $page_index;

        return $this;
    }

    /**
     * Gets save_foreground_pages_only
     *
     * @return bool
     */
    public function getSaveForegroundPagesOnly()
    {
        return $this->container['save_foreground_pages_only'];
    }

    /**
     * Sets save_foreground_pages_only
     *
     * @param bool $save_foreground_pages_only save_foreground_pages_only
     *
     * @return $this
     */
    public function setSaveForegroundPagesOnly($save_foreground_pages_only)
    {
        $this->container['save_foreground_pages_only'] = $save_foreground_pages_only;

        return $this;
    }

    /**
     * Gets same_as_pdf_conversion_area
     *
     * @return bool
     */
    public function getSameAsPdfConversionArea()
    {
        return $this->container['same_as_pdf_conversion_area'];
    }

    /**
     * Sets same_as_pdf_conversion_area
     *
     * @param bool $same_as_pdf_conversion_area same_as_pdf_conversion_area
     *
     * @return $this
     */
    public function setSameAsPdfConversionArea($same_as_pdf_conversion_area)
    {
        $this->container['same_as_pdf_conversion_area'] = $same_as_pdf_conversion_area;

        return $this;
    }

    /**
     * Gets pixel_offset_mode
     *
     * @return string
     */
    public function getPixelOffsetMode()
    {
        return $this->container['pixel_offset_mode'];
    }

    /**
     * Sets pixel_offset_mode
     *
     * @param string $pixel_offset_mode pixel_offset_mode
     *
     * @return $this
     */
    public function setPixelOffsetMode($pixel_offset_mode)
    {
        $allowedValues = $this->getPixelOffsetModeAllowableValues();
        if (!is_null($pixel_offset_mode) && !in_array($pixel_offset_mode, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'pixel_offset_mode', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pixel_offset_mode'] = $pixel_offset_mode;

        return $this;
    }

    /**
     * Gets smoothing_mode
     *
     * @return string
     */
    public function getSmoothingMode()
    {
        return $this->container['smoothing_mode'];
    }

    /**
     * Sets smoothing_mode
     *
     * @param string $smoothing_mode smoothing_mode
     *
     * @return $this
     */
    public function setSmoothingMode($smoothing_mode)
    {
        $allowedValues = $this->getSmoothingModeAllowableValues();
        if (!is_null($smoothing_mode) && !in_array($smoothing_mode, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'smoothing_mode', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['smoothing_mode'] = $smoothing_mode;

        return $this;
    }

    /**
     * Gets compositing_quality
     *
     * @return string
     */
    public function getCompositingQuality()
    {
        return $this->container['compositing_quality'];
    }

    /**
     * Sets compositing_quality
     *
     * @param string $compositing_quality compositing_quality
     *
     * @return $this
     */
    public function setCompositingQuality($compositing_quality)
    {
        $allowedValues = $this->getCompositingQualityAllowableValues();
        if (!is_null($compositing_quality) && !in_array($compositing_quality, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'compositing_quality', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['compositing_quality'] = $compositing_quality;

        return $this;
    }

    /**
     * Gets interpolation_mode
     *
     * @return string
     */
    public function getInterpolationMode()
    {
        return $this->container['interpolation_mode'];
    }

    /**
     * Sets interpolation_mode
     *
     * @param string $interpolation_mode interpolation_mode
     *
     * @return $this
     */
    public function setInterpolationMode($interpolation_mode)
    {
        $allowedValues = $this->getInterpolationModeAllowableValues();
        if (!is_null($interpolation_mode) && !in_array($interpolation_mode, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'interpolation_mode', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['interpolation_mode'] = $interpolation_mode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


