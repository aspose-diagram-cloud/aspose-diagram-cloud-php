<?php
/**
 * PageSize
 *
 * PHP version 5
 *
 * @category Class
 * @package  Aspose\Diagram\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Aspose.Diagram Cloud API Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Aspose\Diagram\Cloud\Model;

use \ArrayAccess;
use \Aspose\Diagram\Cloud\ObjectSerializer;

/**
 * PageSize Class Doc Comment
 *
 * @category Class
 * @package  Aspose\Diagram\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PageSize implements  ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PageSize';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'paper_size_format' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'paper_size_format' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'paper_size_format' => 'PaperSizeFormat'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'paper_size_format' => 'setPaperSizeFormat'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'paper_size_format' => 'getPaperSizeFormat'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PAPER_SIZE_FORMAT_CUSTOM = 'Custom';
    const PAPER_SIZE_FORMAT_A0 = 'A0';
    const PAPER_SIZE_FORMAT_A1 = 'A1';
    const PAPER_SIZE_FORMAT_A2 = 'A2';
    const PAPER_SIZE_FORMAT_A3 = 'A3';
    const PAPER_SIZE_FORMAT_A4 = 'A4';
    const PAPER_SIZE_FORMAT_A5 = 'A5';
    const PAPER_SIZE_FORMAT_A6 = 'A6';
    const PAPER_SIZE_FORMAT_A7 = 'A7';
    const PAPER_SIZE_FORMAT_B0 = 'B0';
    const PAPER_SIZE_FORMAT_B1 = 'B1';
    const PAPER_SIZE_FORMAT_B2 = 'B2';
    const PAPER_SIZE_FORMAT_B3 = 'B3';
    const PAPER_SIZE_FORMAT_B4 = 'B4';
    const PAPER_SIZE_FORMAT_B5 = 'B5';
    const PAPER_SIZE_FORMAT_B6 = 'B6';
    const PAPER_SIZE_FORMAT_B7 = 'B7';
    const PAPER_SIZE_FORMAT_C0 = 'C0';
    const PAPER_SIZE_FORMAT_C1 = 'C1';
    const PAPER_SIZE_FORMAT_C2 = 'C2';
    const PAPER_SIZE_FORMAT_C3 = 'C3';
    const PAPER_SIZE_FORMAT_C4 = 'C4';
    const PAPER_SIZE_FORMAT_C5 = 'C5';
    const PAPER_SIZE_FORMAT_C6 = 'C6';
    const PAPER_SIZE_FORMAT_C7 = 'C7';
    const PAPER_SIZE_FORMAT_LETTER = 'Letter';
    const PAPER_SIZE_FORMAT_LEGAL = 'Legal';
    const PAPER_SIZE_FORMAT_LEGAL13 = 'Legal13';
    const PAPER_SIZE_FORMAT_TABLOID = 'Tabloid';
    const PAPER_SIZE_FORMAT_EXECUTIVE = 'Executive';
    const PAPER_SIZE_FORMAT_DL = 'DL';
    const PAPER_SIZE_FORMAT_COM9 = 'COM9';
    const PAPER_SIZE_FORMAT_COM10 = 'COM10';
    const PAPER_SIZE_FORMAT_MONARCH = 'Monarch';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaperSizeFormatAllowableValues()
    {
        return [
            self::PAPER_SIZE_FORMAT_CUSTOM,
            self::PAPER_SIZE_FORMAT_A0,
            self::PAPER_SIZE_FORMAT_A1,
            self::PAPER_SIZE_FORMAT_A2,
            self::PAPER_SIZE_FORMAT_A3,
            self::PAPER_SIZE_FORMAT_A4,
            self::PAPER_SIZE_FORMAT_A5,
            self::PAPER_SIZE_FORMAT_A6,
            self::PAPER_SIZE_FORMAT_A7,
            self::PAPER_SIZE_FORMAT_B0,
            self::PAPER_SIZE_FORMAT_B1,
            self::PAPER_SIZE_FORMAT_B2,
            self::PAPER_SIZE_FORMAT_B3,
            self::PAPER_SIZE_FORMAT_B4,
            self::PAPER_SIZE_FORMAT_B5,
            self::PAPER_SIZE_FORMAT_B6,
            self::PAPER_SIZE_FORMAT_B7,
            self::PAPER_SIZE_FORMAT_C0,
            self::PAPER_SIZE_FORMAT_C1,
            self::PAPER_SIZE_FORMAT_C2,
            self::PAPER_SIZE_FORMAT_C3,
            self::PAPER_SIZE_FORMAT_C4,
            self::PAPER_SIZE_FORMAT_C5,
            self::PAPER_SIZE_FORMAT_C6,
            self::PAPER_SIZE_FORMAT_C7,
            self::PAPER_SIZE_FORMAT_LETTER,
            self::PAPER_SIZE_FORMAT_LEGAL,
            self::PAPER_SIZE_FORMAT_LEGAL13,
            self::PAPER_SIZE_FORMAT_TABLOID,
            self::PAPER_SIZE_FORMAT_EXECUTIVE,
            self::PAPER_SIZE_FORMAT_DL,
            self::PAPER_SIZE_FORMAT_COM9,
            self::PAPER_SIZE_FORMAT_COM10,
            self::PAPER_SIZE_FORMAT_MONARCH,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['paper_size_format'] = isset($data['paper_size_format']) ? $data['paper_size_format'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPaperSizeFormatAllowableValues();
        if (!in_array($this->container['paper_size_format'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'paper_size_format', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getPaperSizeFormatAllowableValues();
        if (!in_array($this->container['paper_size_format'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets paper_size_format
     *
     * @return string
     */
    public function getPaperSizeFormat()
    {
        return $this->container['paper_size_format'];
    }

    /**
     * Sets paper_size_format
     *
     * @param string $paper_size_format paper_size_format
     *
     * @return $this
     */
    public function setPaperSizeFormat($paper_size_format)
    {
        $allowedValues = $this->getPaperSizeFormatAllowableValues();
        if (!is_null($paper_size_format) && !in_array($paper_size_format, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'paper_size_format', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['paper_size_format'] = $paper_size_format;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


