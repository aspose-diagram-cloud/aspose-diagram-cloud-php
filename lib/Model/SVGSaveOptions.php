<?php
/**
 * SVGSaveOptions
 *
 * PHP version 5
 *
 * @category Class
 * @package  Aspose\Diagram\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Aspose.Diagram Cloud API Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Aspose\Diagram\Cloud\Model;
use \Aspose\Diagram\Cloud\ObjectSerializer;

/**
 * SVGSaveOptions Class Doc Comment
 *
 * @category Class
 * @package  Aspose\Diagram\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SVGSaveOptions extends RenderingSaveOptions 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SVGSaveOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'export_hidden_page' => 'bool',
        'quality' => 'int',
        'page_index' => 'int',
        'svg_fit_to_view_port' => 'bool',
        'export_element_as_rect_tag' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'export_hidden_page' => null,
        'quality' => 'int32',
        'page_index' => 'int32',
        'svg_fit_to_view_port' => null,
        'export_element_as_rect_tag' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'export_hidden_page' => 'ExportHiddenPage',
        'quality' => 'Quality',
        'page_index' => 'PageIndex',
        'svg_fit_to_view_port' => 'SVGFitToViewPort',
        'export_element_as_rect_tag' => 'ExportElementAsRectTag'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'export_hidden_page' => 'setExportHiddenPage',
        'quality' => 'setQuality',
        'page_index' => 'setPageIndex',
        'svg_fit_to_view_port' => 'setSvgFitToViewPort',
        'export_element_as_rect_tag' => 'setExportElementAsRectTag'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'export_hidden_page' => 'getExportHiddenPage',
        'quality' => 'getQuality',
        'page_index' => 'getPageIndex',
        'svg_fit_to_view_port' => 'getSvgFitToViewPort',
        'export_element_as_rect_tag' => 'getExportElementAsRectTag'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['export_hidden_page'] = isset($data['export_hidden_page']) ? $data['export_hidden_page'] : null;
        $this->container['quality'] = isset($data['quality']) ? $data['quality'] : null;
        $this->container['page_index'] = isset($data['page_index']) ? $data['page_index'] : null;
        $this->container['svg_fit_to_view_port'] = isset($data['svg_fit_to_view_port']) ? $data['svg_fit_to_view_port'] : null;
        $this->container['export_element_as_rect_tag'] = isset($data['export_element_as_rect_tag']) ? $data['export_element_as_rect_tag'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if (!parent::valid()) {
            return false;
        }

        return true;
    }


    /**
     * Gets export_hidden_page
     *
     * @return bool
     */
    public function getExportHiddenPage()
    {
        return $this->container['export_hidden_page'];
    }

    /**
     * Sets export_hidden_page
     *
     * @param bool $export_hidden_page export_hidden_page
     *
     * @return $this
     */
    public function setExportHiddenPage($export_hidden_page)
    {
        $this->container['export_hidden_page'] = $export_hidden_page;

        return $this;
    }

    /**
     * Gets quality
     *
     * @return int
     */
    public function getQuality()
    {
        return $this->container['quality'];
    }

    /**
     * Sets quality
     *
     * @param int $quality quality
     *
     * @return $this
     */
    public function setQuality($quality)
    {
        $this->container['quality'] = $quality;

        return $this;
    }

    /**
     * Gets page_index
     *
     * @return int
     */
    public function getPageIndex()
    {
        return $this->container['page_index'];
    }

    /**
     * Sets page_index
     *
     * @param int $page_index page_index
     *
     * @return $this
     */
    public function setPageIndex($page_index)
    {
        $this->container['page_index'] = $page_index;

        return $this;
    }

    /**
     * Gets svg_fit_to_view_port
     *
     * @return bool
     */
    public function getSvgFitToViewPort()
    {
        return $this->container['svg_fit_to_view_port'];
    }

    /**
     * Sets svg_fit_to_view_port
     *
     * @param bool $svg_fit_to_view_port svg_fit_to_view_port
     *
     * @return $this
     */
    public function setSvgFitToViewPort($svg_fit_to_view_port)
    {
        $this->container['svg_fit_to_view_port'] = $svg_fit_to_view_port;

        return $this;
    }

    /**
     * Gets export_element_as_rect_tag
     *
     * @return bool
     */
    public function getExportElementAsRectTag()
    {
        return $this->container['export_element_as_rect_tag'];
    }

    /**
     * Sets export_element_as_rect_tag
     *
     * @param bool $export_element_as_rect_tag export_element_as_rect_tag
     *
     * @return $this
     */
    public function setExportElementAsRectTag($export_element_as_rect_tag)
    {
        $this->container['export_element_as_rect_tag'] = $export_element_as_rect_tag;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


