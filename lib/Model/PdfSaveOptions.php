<?php
/**
 * PdfSaveOptions
 *
 * PHP version 5
 *
 * @category Class
 * @package  Aspose\Diagram\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Aspose.Diagram Cloud API Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Aspose\Diagram\Cloud\Model;
use \Aspose\Diagram\Cloud\ObjectSerializer;

/**
 * PdfSaveOptions Class Doc Comment
 *
 * @category Class
 * @package  Aspose\Diagram\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PdfSaveOptions extends RenderingSaveOptions 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PdfSaveOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'horizontal_resolution' => 'int',
        'vertical_resolution' => 'int',
        'page_count' => 'int',
        'jpeg_quality' => 'int',
        'export_hidden_page' => 'bool',
        'page_index' => 'int',
        'save_foreground_pages_only' => 'bool',
        'compliance' => 'string',
        'encryption_details' => '\Aspose\Diagram\Cloud\Model\PdfEncryptionDetails',
        'text_compression' => 'string',
        'split_multi_pages' => 'bool',
        'digital_signature_details' => '\Aspose\Diagram\Cloud\Model\PdfDigitalSignatureDetails'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'horizontal_resolution' => 'int32',
        'vertical_resolution' => 'int32',
        'page_count' => 'int32',
        'jpeg_quality' => 'int32',
        'export_hidden_page' => null,
        'page_index' => 'int32',
        'save_foreground_pages_only' => null,
        'compliance' => null,
        'encryption_details' => null,
        'text_compression' => null,
        'split_multi_pages' => null,
        'digital_signature_details' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'horizontal_resolution' => 'HorizontalResolution',
        'vertical_resolution' => 'VerticalResolution',
        'page_count' => 'PageCount',
        'jpeg_quality' => 'JpegQuality',
        'export_hidden_page' => 'ExportHiddenPage',
        'page_index' => 'PageIndex',
        'save_foreground_pages_only' => 'SaveForegroundPagesOnly',
        'compliance' => 'Compliance',
        'encryption_details' => 'EncryptionDetails',
        'text_compression' => 'TextCompression',
        'split_multi_pages' => 'SplitMultiPages',
        'digital_signature_details' => 'DigitalSignatureDetails'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'horizontal_resolution' => 'setHorizontalResolution',
        'vertical_resolution' => 'setVerticalResolution',
        'page_count' => 'setPageCount',
        'jpeg_quality' => 'setJpegQuality',
        'export_hidden_page' => 'setExportHiddenPage',
        'page_index' => 'setPageIndex',
        'save_foreground_pages_only' => 'setSaveForegroundPagesOnly',
        'compliance' => 'setCompliance',
        'encryption_details' => 'setEncryptionDetails',
        'text_compression' => 'setTextCompression',
        'split_multi_pages' => 'setSplitMultiPages',
        'digital_signature_details' => 'setDigitalSignatureDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'horizontal_resolution' => 'getHorizontalResolution',
        'vertical_resolution' => 'getVerticalResolution',
        'page_count' => 'getPageCount',
        'jpeg_quality' => 'getJpegQuality',
        'export_hidden_page' => 'getExportHiddenPage',
        'page_index' => 'getPageIndex',
        'save_foreground_pages_only' => 'getSaveForegroundPagesOnly',
        'compliance' => 'getCompliance',
        'encryption_details' => 'getEncryptionDetails',
        'text_compression' => 'getTextCompression',
        'split_multi_pages' => 'getSplitMultiPages',
        'digital_signature_details' => 'getDigitalSignatureDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const COMPLIANCE_PDF15 = 'Pdf15';
    const COMPLIANCE_PDF_A1A = 'PdfA1a';
    const COMPLIANCE_PDF_A1B = 'PdfA1b';
    const TEXT_COMPRESSION_NONE = 'None';
    const TEXT_COMPRESSION_FLATE = 'Flate';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getComplianceAllowableValues()
    {
        return [
            self::COMPLIANCE_PDF15,
            self::COMPLIANCE_PDF_A1A,
            self::COMPLIANCE_PDF_A1B,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTextCompressionAllowableValues()
    {
        return [
            self::TEXT_COMPRESSION_NONE,
            self::TEXT_COMPRESSION_FLATE,
        ];
    }
    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['horizontal_resolution'] = isset($data['horizontal_resolution']) ? $data['horizontal_resolution'] : null;
        $this->container['vertical_resolution'] = isset($data['vertical_resolution']) ? $data['vertical_resolution'] : null;
        $this->container['page_count'] = isset($data['page_count']) ? $data['page_count'] : null;
        $this->container['jpeg_quality'] = isset($data['jpeg_quality']) ? $data['jpeg_quality'] : null;
        $this->container['export_hidden_page'] = isset($data['export_hidden_page']) ? $data['export_hidden_page'] : null;
        $this->container['page_index'] = isset($data['page_index']) ? $data['page_index'] : null;
        $this->container['save_foreground_pages_only'] = isset($data['save_foreground_pages_only']) ? $data['save_foreground_pages_only'] : null;
        $this->container['compliance'] = isset($data['compliance']) ? $data['compliance'] : null;
        $this->container['encryption_details'] = isset($data['encryption_details']) ? $data['encryption_details'] : null;
        $this->container['text_compression'] = isset($data['text_compression']) ? $data['text_compression'] : null;
        $this->container['split_multi_pages'] = isset($data['split_multi_pages']) ? $data['split_multi_pages'] : null;
        $this->container['digital_signature_details'] = isset($data['digital_signature_details']) ? $data['digital_signature_details'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        $allowedValues = $this->getComplianceAllowableValues();
        if (!in_array($this->container['compliance'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'compliance', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTextCompressionAllowableValues();
        if (!in_array($this->container['text_compression'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'text_compression', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if (!parent::valid()) {
            return false;
        }

        $allowedValues = $this->getComplianceAllowableValues();
        if (!in_array($this->container['compliance'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getTextCompressionAllowableValues();
        if (!in_array($this->container['text_compression'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets horizontal_resolution
     *
     * @return int
     */
    public function getHorizontalResolution()
    {
        return $this->container['horizontal_resolution'];
    }

    /**
     * Sets horizontal_resolution
     *
     * @param int $horizontal_resolution horizontal_resolution
     *
     * @return $this
     */
    public function setHorizontalResolution($horizontal_resolution)
    {
        $this->container['horizontal_resolution'] = $horizontal_resolution;

        return $this;
    }

    /**
     * Gets vertical_resolution
     *
     * @return int
     */
    public function getVerticalResolution()
    {
        return $this->container['vertical_resolution'];
    }

    /**
     * Sets vertical_resolution
     *
     * @param int $vertical_resolution vertical_resolution
     *
     * @return $this
     */
    public function setVerticalResolution($vertical_resolution)
    {
        $this->container['vertical_resolution'] = $vertical_resolution;

        return $this;
    }

    /**
     * Gets page_count
     *
     * @return int
     */
    public function getPageCount()
    {
        return $this->container['page_count'];
    }

    /**
     * Sets page_count
     *
     * @param int $page_count page_count
     *
     * @return $this
     */
    public function setPageCount($page_count)
    {
        $this->container['page_count'] = $page_count;

        return $this;
    }

    /**
     * Gets jpeg_quality
     *
     * @return int
     */
    public function getJpegQuality()
    {
        return $this->container['jpeg_quality'];
    }

    /**
     * Sets jpeg_quality
     *
     * @param int $jpeg_quality jpeg_quality
     *
     * @return $this
     */
    public function setJpegQuality($jpeg_quality)
    {
        $this->container['jpeg_quality'] = $jpeg_quality;

        return $this;
    }

    /**
     * Gets export_hidden_page
     *
     * @return bool
     */
    public function getExportHiddenPage()
    {
        return $this->container['export_hidden_page'];
    }

    /**
     * Sets export_hidden_page
     *
     * @param bool $export_hidden_page export_hidden_page
     *
     * @return $this
     */
    public function setExportHiddenPage($export_hidden_page)
    {
        $this->container['export_hidden_page'] = $export_hidden_page;

        return $this;
    }

    /**
     * Gets page_index
     *
     * @return int
     */
    public function getPageIndex()
    {
        return $this->container['page_index'];
    }

    /**
     * Sets page_index
     *
     * @param int $page_index page_index
     *
     * @return $this
     */
    public function setPageIndex($page_index)
    {
        $this->container['page_index'] = $page_index;

        return $this;
    }

    /**
     * Gets save_foreground_pages_only
     *
     * @return bool
     */
    public function getSaveForegroundPagesOnly()
    {
        return $this->container['save_foreground_pages_only'];
    }

    /**
     * Sets save_foreground_pages_only
     *
     * @param bool $save_foreground_pages_only save_foreground_pages_only
     *
     * @return $this
     */
    public function setSaveForegroundPagesOnly($save_foreground_pages_only)
    {
        $this->container['save_foreground_pages_only'] = $save_foreground_pages_only;

        return $this;
    }

    /**
     * Gets compliance
     *
     * @return string
     */
    public function getCompliance()
    {
        return $this->container['compliance'];
    }

    /**
     * Sets compliance
     *
     * @param string $compliance compliance
     *
     * @return $this
     */
    public function setCompliance($compliance)
    {
        $allowedValues = $this->getComplianceAllowableValues();
        if (!is_null($compliance) && !in_array($compliance, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'compliance', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['compliance'] = $compliance;

        return $this;
    }

    /**
     * Gets encryption_details
     *
     * @return \Aspose\Diagram\Cloud\Model\PdfEncryptionDetails
     */
    public function getEncryptionDetails()
    {
        return $this->container['encryption_details'];
    }

    /**
     * Sets encryption_details
     *
     * @param \Aspose\Diagram\Cloud\Model\PdfEncryptionDetails $encryption_details encryption_details
     *
     * @return $this
     */
    public function setEncryptionDetails($encryption_details)
    {
        $this->container['encryption_details'] = $encryption_details;

        return $this;
    }

    /**
     * Gets text_compression
     *
     * @return string
     */
    public function getTextCompression()
    {
        return $this->container['text_compression'];
    }

    /**
     * Sets text_compression
     *
     * @param string $text_compression text_compression
     *
     * @return $this
     */
    public function setTextCompression($text_compression)
    {
        $allowedValues = $this->getTextCompressionAllowableValues();
        if (!is_null($text_compression) && !in_array($text_compression, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'text_compression', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['text_compression'] = $text_compression;

        return $this;
    }

    /**
     * Gets split_multi_pages
     *
     * @return bool
     */
    public function getSplitMultiPages()
    {
        return $this->container['split_multi_pages'];
    }

    /**
     * Sets split_multi_pages
     *
     * @param bool $split_multi_pages split_multi_pages
     *
     * @return $this
     */
    public function setSplitMultiPages($split_multi_pages)
    {
        $this->container['split_multi_pages'] = $split_multi_pages;

        return $this;
    }

    /**
     * Gets digital_signature_details
     *
     * @return \Aspose\Diagram\Cloud\Model\PdfDigitalSignatureDetails
     */
    public function getDigitalSignatureDetails()
    {
        return $this->container['digital_signature_details'];
    }

    /**
     * Sets digital_signature_details
     *
     * @param \Aspose\Diagram\Cloud\Model\PdfDigitalSignatureDetails $digital_signature_details digital_signature_details
     *
     * @return $this
     */
    public function setDigitalSignatureDetails($digital_signature_details)
    {
        $this->container['digital_signature_details'] = $digital_signature_details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


