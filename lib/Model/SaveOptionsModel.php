<?php
/**
 * SaveOptionsModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Aspose\Diagram\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Aspose.Diagram Cloud API Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Aspose\Diagram\Cloud\Model;

use \ArrayAccess;
use \Aspose\Diagram\Cloud\ObjectSerializer;

/**
 * SaveOptionsModel Class Doc Comment
 *
 * @category Class
 * @package  Aspose\Diagram\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SaveOptionsModel implements  ArrayAccess
{
    const DISCRIMINATOR = 'Type';

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SaveOptionsModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'save_format' => 'string',
        'default_font' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'save_format' => null,
        'default_font' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'save_format' => 'SaveFormat',
        'default_font' => 'DefaultFont'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'save_format' => 'setSaveFormat',
        'default_font' => 'setDefaultFont'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'save_format' => 'getSaveFormat',
        'default_font' => 'getDefaultFont'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SAVE_FORMAT_VDX = 'VDX';
    const SAVE_FORMAT_VSX = 'VSX';
    const SAVE_FORMAT_VTX = 'VTX';
    const SAVE_FORMAT_TIFF = 'TIFF';
    const SAVE_FORMAT_PNG = 'PNG';
    const SAVE_FORMAT_BMP = 'BMP';
    const SAVE_FORMAT_EMF = 'EMF';
    const SAVE_FORMAT_JPEG = 'JPEG';
    const SAVE_FORMAT_PDF = 'PDF';
    const SAVE_FORMAT_XPS = 'XPS';
    const SAVE_FORMAT_GIF = 'GIF';
    const SAVE_FORMAT_HTML = 'HTML';
    const SAVE_FORMAT_SVG = 'SVG';
    const SAVE_FORMAT_SWF = 'SWF';
    const SAVE_FORMAT_XAML = 'XAML';
    const SAVE_FORMAT_VSDX = 'VSDX';
    const SAVE_FORMAT_VSTX = 'VSTX';
    const SAVE_FORMAT_VSSX = 'VSSX';
    const SAVE_FORMAT_VSDM = 'VSDM';
    const SAVE_FORMAT_VSSM = 'VSSM';
    const SAVE_FORMAT_VSTM = 'VSTM';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSaveFormatAllowableValues()
    {
        return [
            self::SAVE_FORMAT_VDX,
            self::SAVE_FORMAT_VSX,
            self::SAVE_FORMAT_VTX,
            self::SAVE_FORMAT_TIFF,
            self::SAVE_FORMAT_PNG,
            self::SAVE_FORMAT_BMP,
            self::SAVE_FORMAT_EMF,
            self::SAVE_FORMAT_JPEG,
            self::SAVE_FORMAT_PDF,
            self::SAVE_FORMAT_XPS,
            self::SAVE_FORMAT_GIF,
            self::SAVE_FORMAT_HTML,
            self::SAVE_FORMAT_SVG,
            self::SAVE_FORMAT_SWF,
            self::SAVE_FORMAT_XAML,
            self::SAVE_FORMAT_VSDX,
            self::SAVE_FORMAT_VSTX,
            self::SAVE_FORMAT_VSSX,
            self::SAVE_FORMAT_VSDM,
            self::SAVE_FORMAT_VSSM,
            self::SAVE_FORMAT_VSTM,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['save_format'] = isset($data['save_format']) ? $data['save_format'] : null;
        $this->container['default_font'] = isset($data['default_font']) ? $data['default_font'] : null;

        // Initialize discriminator property with the model name.
        $discriminator = array_search('Type', self::$attributeMap);
        $this->container[$discriminator] = static::$swaggerModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['save_format'] === null) {
            $invalidProperties[] = "'save_format' can't be null";
        }
        $allowedValues = $this->getSaveFormatAllowableValues();
        if (!in_array($this->container['save_format'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'save_format', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['save_format'] === null) {
            return false;
        }
        $allowedValues = $this->getSaveFormatAllowableValues();
        if (!in_array($this->container['save_format'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets save_format
     *
     * @return string
     */
    public function getSaveFormat()
    {
        return $this->container['save_format'];
    }

    /**
     * Sets save_format
     *
     * @param string $save_format save_format
     *
     * @return $this
     */
    public function setSaveFormat($save_format)
    {
        $allowedValues = $this->getSaveFormatAllowableValues();
        if (!in_array($save_format, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'save_format', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['save_format'] = $save_format;

        return $this;
    }

    /**
     * Gets default_font
     *
     * @return string
     */
    public function getDefaultFont()
    {
        return $this->container['default_font'];
    }

    /**
     * Sets default_font
     *
     * @param string $default_font default_font
     *
     * @return $this
     */
    public function setDefaultFont($default_font)
    {
        $this->container['default_font'] = $default_font;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


