<?php
/**
 * PdfEncryptionDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  Aspose\Diagram\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Aspose.Diagram Cloud API Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Aspose\Diagram\Cloud\Model;

use \ArrayAccess;
use \Aspose\Diagram\Cloud\ObjectSerializer;

/**
 * PdfEncryptionDetails Class Doc Comment
 *
 * @category Class
 * @package  Aspose\Diagram\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PdfEncryptionDetails implements  ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PdfEncryptionDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'permissions' => 'string',
        'encryption_algorithm' => 'string',
        'user_password' => 'string',
        'owner_password' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'permissions' => null,
        'encryption_algorithm' => null,
        'user_password' => null,
        'owner_password' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'permissions' => 'Permissions',
        'encryption_algorithm' => 'EncryptionAlgorithm',
        'user_password' => 'UserPassword',
        'owner_password' => 'OwnerPassword'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'permissions' => 'setPermissions',
        'encryption_algorithm' => 'setEncryptionAlgorithm',
        'user_password' => 'setUserPassword',
        'owner_password' => 'setOwnerPassword'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'permissions' => 'getPermissions',
        'encryption_algorithm' => 'getEncryptionAlgorithm',
        'user_password' => 'getUserPassword',
        'owner_password' => 'getOwnerPassword'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PERMISSIONS_DISALLOW_ALL = 'DisallowAll';
    const PERMISSIONS_PRINTING = 'Printing';
    const PERMISSIONS_MODIFY_CONTENTS = 'ModifyContents';
    const PERMISSIONS_CONTENT_COPY = 'ContentCopy';
    const PERMISSIONS_MODIFY_ANNOTATIONS = 'ModifyAnnotations';
    const PERMISSIONS_FILL_IN = 'FillIn';
    const PERMISSIONS_CONTENT_COPY_FOR_ACCESSIBILITY = 'ContentCopyForAccessibility';
    const PERMISSIONS_DOCUMENT_ASSEMBLY = 'DocumentAssembly';
    const PERMISSIONS_HIGH_RESOLUTION_PRINTING = 'HighResolutionPrinting';
    const PERMISSIONS_ALLOW_ALL = 'AllowAll';
    const ENCRYPTION_ALGORITHM__40 = 'RC4_40';
    const ENCRYPTION_ALGORITHM__128 = 'RC4_128';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPermissionsAllowableValues()
    {
        return [
            self::PERMISSIONS_DISALLOW_ALL,
            self::PERMISSIONS_PRINTING,
            self::PERMISSIONS_MODIFY_CONTENTS,
            self::PERMISSIONS_CONTENT_COPY,
            self::PERMISSIONS_MODIFY_ANNOTATIONS,
            self::PERMISSIONS_FILL_IN,
            self::PERMISSIONS_CONTENT_COPY_FOR_ACCESSIBILITY,
            self::PERMISSIONS_DOCUMENT_ASSEMBLY,
            self::PERMISSIONS_HIGH_RESOLUTION_PRINTING,
            self::PERMISSIONS_ALLOW_ALL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEncryptionAlgorithmAllowableValues()
    {
        return [
            self::ENCRYPTION_ALGORITHM__40,
            self::ENCRYPTION_ALGORITHM__128,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['permissions'] = isset($data['permissions']) ? $data['permissions'] : null;
        $this->container['encryption_algorithm'] = isset($data['encryption_algorithm']) ? $data['encryption_algorithm'] : null;
        $this->container['user_password'] = isset($data['user_password']) ? $data['user_password'] : null;
        $this->container['owner_password'] = isset($data['owner_password']) ? $data['owner_password'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPermissionsAllowableValues();
        if (!in_array($this->container['permissions'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'permissions', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEncryptionAlgorithmAllowableValues();
        if (!in_array($this->container['encryption_algorithm'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'encryption_algorithm', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getPermissionsAllowableValues();
        if (!in_array($this->container['permissions'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getEncryptionAlgorithmAllowableValues();
        if (!in_array($this->container['encryption_algorithm'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets permissions
     *
     * @return string
     */
    public function getPermissions()
    {
        return $this->container['permissions'];
    }

    /**
     * Sets permissions
     *
     * @param string $permissions permissions
     *
     * @return $this
     */
    public function setPermissions($permissions)
    {
        $allowedValues = $this->getPermissionsAllowableValues();
        if (!is_null($permissions) && !in_array($permissions, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'permissions', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['permissions'] = $permissions;

        return $this;
    }

    /**
     * Gets encryption_algorithm
     *
     * @return string
     */
    public function getEncryptionAlgorithm()
    {
        return $this->container['encryption_algorithm'];
    }

    /**
     * Sets encryption_algorithm
     *
     * @param string $encryption_algorithm encryption_algorithm
     *
     * @return $this
     */
    public function setEncryptionAlgorithm($encryption_algorithm)
    {
        $allowedValues = $this->getEncryptionAlgorithmAllowableValues();
        if (!is_null($encryption_algorithm) && !in_array($encryption_algorithm, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'encryption_algorithm', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['encryption_algorithm'] = $encryption_algorithm;

        return $this;
    }

    /**
     * Gets user_password
     *
     * @return string
     */
    public function getUserPassword()
    {
        return $this->container['user_password'];
    }

    /**
     * Sets user_password
     *
     * @param string $user_password user_password
     *
     * @return $this
     */
    public function setUserPassword($user_password)
    {
        $this->container['user_password'] = $user_password;

        return $this;
    }

    /**
     * Gets owner_password
     *
     * @return string
     */
    public function getOwnerPassword()
    {
        return $this->container['owner_password'];
    }

    /**
     * Sets owner_password
     *
     * @param string $owner_password owner_password
     *
     * @return $this
     */
    public function setOwnerPassword($owner_password)
    {
        $this->container['owner_password'] = $owner_password;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


