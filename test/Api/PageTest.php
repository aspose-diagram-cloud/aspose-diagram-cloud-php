<?php
/**
 * DiagramApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Aspose\Diagram\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Aspose.Diagram Cloud API Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Aspose\Diagram\Cloud;
use Aspose\Diagram\Cloud\Model\PageSetting;
use Aspose\Diagram\Cloud\Model\SaveOptionsRequest;
use Aspose\Diagram\Cloud\Model\DiagramSaveOptions;
use Aspose\Diagram\Cloud\Model\FilesUploadResult;
use Aspose\Diagram\Cloud\Model\HTMLSaveOptions;
use Aspose\Diagram\Cloud\Model\ImageSaveOptions;
use Aspose\Diagram\Cloud\Model\PdfSaveOptions;
use Aspose\Diagram\Cloud\Model\SVGSaveOptions;
use Aspose\Diagram\Cloud\Model\SWFSaveOptions;
use Aspose\Diagram\Cloud\Model\SaveAsResponse;
use Aspose\Diagram\Cloud\Model\XPSSaveOptions;

require_once('TestBase.php');

/**
 * DiagramApiTest Class Doc Comment
 *
 * @category Class
 * @package  Aspose\Diagram\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PageTest extends \PHPUnit_Framework_TestCase
{
    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {

    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    static $fileName="pageTest.vsdx";

    /**
     * Test case for createNew
     *
     * Create Empty file into the specified format..
     *
     */
    public function testCreateNew()
    {
        $diagramApi = TestBase::getDiagramApi();
        $json = $diagramApi->createNew(PageTest::$fileName,TestBase::$storageTestFOLDER,"true");
        $result = json_decode($json);
        $this->assertNotEmpty( $result->Created);
        TestBase::PrintDebugInfo("TestCreateNew result:".$json);

    }


    public function testPutNewPage()
    {
        $diagramApi = TestBase::getDiagramApi();
        $json=$diagramApi->putNewPage(PageTest::$fileName,"newPage",TestBase::$storageTestFOLDER);
        $result = json_decode($json);
        $this->assertTrue($result->IsSuccess);
        TestBase::PrintDebugInfo("TestCreateNew result:".$json);
    }

    public function testGetPages()
    {
        $diagramApi = TestBase::getDiagramApi();
        $json=$diagramApi->getPages(PageTest::$fileName,TestBase::$storageTestFOLDER);
        $result = json_decode($json);
        $this->assertTrue(count($result->Model)>0);
        TestBase::PrintDebugInfo("testGetPages result:".$json);
    }

    public function testPostPageSetup()
    {
        $diagramApi = TestBase::getDiagramApi();
        $page_setting=new PageSetting();
        $page_setting->setPageHeight(2);
        $page_setting->setPageWidth(2);
        $json=$diagramApi->postPageSetup(PageTest::$fileName,"Page-0",$page_setting,TestBase::$storageTestFOLDER);
        $result = json_decode($json);
        $this->assertTrue($result->IsSuccess);
        TestBase::PrintDebugInfo("testPostPageSetup result:".$json);
    }
}
