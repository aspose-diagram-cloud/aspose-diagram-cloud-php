<?php
/**
 * DiagramApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Aspose\Diagram\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Aspose.Diagram Cloud API Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Aspose\Diagram\Cloud;
use Aspose\Diagram\Cloud\Model\SaveOptionsRequest;
use Aspose\Diagram\Cloud\Model\DiagramSaveOptions;
use Aspose\Diagram\Cloud\Model\FilesUploadResult;
use Aspose\Diagram\Cloud\Model\HTMLSaveOptions;
use Aspose\Diagram\Cloud\Model\ImageSaveOptions;
use Aspose\Diagram\Cloud\Model\PdfSaveOptions;
use Aspose\Diagram\Cloud\Model\SVGSaveOptions;
use Aspose\Diagram\Cloud\Model\SWFSaveOptions;
use Aspose\Diagram\Cloud\Model\SaveAsResponse;
use Aspose\Diagram\Cloud\Model\XPSSaveOptions;

require_once('TestBase.php');

/**
 * DiagramApiTest Class Doc Comment
 *
 * @category Class
 * @package  Aspose\Diagram\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConvertTest extends \PHPUnit_Framework_TestCase
{


    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {

    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for convertDocument
     *
     * Converts document from the request's content to the specified format..
     *
     */
    public function testConvertDocument()
    {
        $diagramApi = TestBase::getDiagramApi();
        $localFilePath = realpath(__DIR__ . '/../..') . '\testData\FileUpload.vdx';
        $result =  $diagramApi->convertDocument("Convert.pdf",  $localFilePath);
        $this->assertGreaterThan(100, $result->getSize());
        TestBase::PrintDebugInfo("File Convert size:".$result->getSize());
    }

    /**
     * Test case for createNew
     *
     * Create Empty file into the specified format..
     *
     */
    public function testCreateNew()
    {
        $diagramApi = TestBase::getDiagramApi();
        $result = $diagramApi->createNew("file_create_php.vdx",TestBase::$storageTestFOLDER,"true");
        $json = json_decode($result);
        $this->assertNotEmpty($json->Created);
        TestBase::PrintDebugInfo("TestCreateNew result:".$result);
    }


    public  function  testUploadFile(){
        $storageApi = TestBase::getStorageApi();
        $localFilePath = realpath(__DIR__ . '/../..') . '\testData\FileUpload.vdx';
        $result =$storageApi->uploadFile(TestBase::$storageTestFOLDER,$localFilePath);
        $json = json_decode($result);
        $this->assertNotEmpty($json->Uploaded);
        TestBase::PrintDebugInfo("TestUploadFile result:".$result);
    }

    /**
     * Test case for downloadFileWithFormat
     *
     * Exports the document into the specified format..
     *
     */
    public function testDownloadFileWithFormat()
    {
        $diagramApi = TestBase::getDiagramApi();
        $result=$diagramApi->downloadFileWithFormat("FileUpload.vdx","pdf",TestBase::$storageTestFOLDER);
        $this->assertGreaterThan(100, $result->getSize());
        TestBase::PrintDebugInfo("File download size:".$result->getSize());
    }

    /**
     * Test case for saveAs
     *
     * Converts document to destination format with detailed settings and saves result to storage..
     *
     */
    public function testSaveAs()
    {
        $diagramApi = TestBase::getDiagramApi();
        $saveOptionsRequest= new SaveOptionsRequest();
        $saveOptionsRequest->setFileName("FileSaveAs.pdf");
        $saveOptionsRequest->setFolder(TestBase::$storageTestFOLDER);
        $result=$diagramApi->saveAs("FileUpload.vdx", $saveOptionsRequest, TestBase::$storageTestFOLDER, "true");
        $json = json_decode($result);
        $this->assertNotEmpty($json->SavedFile);
        TestBase::PrintDebugInfo("TestSaveAs result:".$result);
    }

    public function testSaveAsPDF()
    {
        $diagramApi = TestBase::getDiagramApi();
        $saveOptionsRequest= new SaveOptionsRequest();
        $saveOptionsRequest->setFileName("FileSaveAs2.pdf");
        $saveOptionsRequest->setFolder(TestBase::$storageTestFOLDER);
        $saveOptions = new PdfSaveOptions();
        $saveOptions->setIsExportComments(true);
        $saveOptions->setJpegQuality(100);

        $saveOptionsRequest->setSaveOptions($saveOptions);
        $result=$diagramApi->saveAs("FileUpload.vdx", $saveOptionsRequest, TestBase::$storageTestFOLDER, "true");
        $json = json_decode($result);
        $this->assertNotEmpty($json->SavedFile);
        TestBase::PrintDebugInfo("TestSaveAsPDF result:".$result);
    }

    public function testSaveAsPNG()
    {
        $diagramApi = TestBase::getDiagramApi();
        $saveOptionsRequest= new SaveOptionsRequest();
        $saveOptionsRequest->setFileName("FileSaveAs.png");
        $saveOptionsRequest->setFolder(TestBase::$storageTestFOLDER);
        $saveOptions = new ImageSaveOptions();
        $saveOptions->setIsExportComments(true);
        $saveOptions->setJpegQuality(100);

        $saveOptionsRequest->setSaveOptions($saveOptions);
        $result=$diagramApi->saveAs("FileUpload.vdx", $saveOptionsRequest, TestBase::$storageTestFOLDER, "true");
        $json = json_decode($result);
        $this->assertNotEmpty($json->SavedFile);
        TestBase::PrintDebugInfo("TestSaveAsPNG result:".$result);
    }

    public function testSaveAsBMP()
    {
        $diagramApi = TestBase::getDiagramApi();
        $saveOptionsRequest= new SaveOptionsRequest();
        $saveOptionsRequest->setFileName("FileSaveAs.bmp");
        $saveOptionsRequest->setFolder(TestBase::$storageTestFOLDER);
        $saveOptions = new ImageSaveOptions();
        $saveOptions->setIsExportComments(true);
        $saveOptions->setJpegQuality(50);

        $saveOptionsRequest->setSaveOptions($saveOptions);
        $result=$diagramApi->saveAs("FileUpload.vdx", $saveOptionsRequest, TestBase::$storageTestFOLDER, "true");
        $json = json_decode($result);
        $this->assertNotEmpty($json->SavedFile);
        TestBase::PrintDebugInfo("TestSaveAsBMP result:".$result);
    }

    public function testSaveAsVSSX()
    {
        $diagramApi = TestBase::getDiagramApi();
        $saveOptionsRequest= new SaveOptionsRequest();
        $saveOptionsRequest->setFileName("FileSaveAs.vssx");
        $saveOptionsRequest->setFolder(TestBase::$storageTestFOLDER);
        $saveOptions = new DiagramSaveOptions();
        $saveOptions->setDefaultFont("Times New Roman");
        $saveOptionsRequest->setSaveOptions($saveOptions);
        $result=$diagramApi->saveAs("FileUpload.vdx", $saveOptionsRequest, TestBase::$storageTestFOLDER, "true");
        $json = json_decode($result);
        $this->assertNotEmpty($json->SavedFile);
        TestBase::PrintDebugInfo("TestSaveAsVSSX result:".$result);
    }

    public function testSaveAsVSTM()
    {
        $diagramApi = TestBase::getDiagramApi();
        $saveOptionsRequest= new SaveOptionsRequest();
        $saveOptionsRequest->setFileName("FileSaveAs.vstm");
        $saveOptionsRequest->setFolder(TestBase::$storageTestFOLDER);
        $saveOptions = new DiagramSaveOptions();
        $saveOptions->setDefaultFont("Times New Roman");
        $saveOptionsRequest->setSaveOptions($saveOptions);
        $result=$diagramApi->saveAs("FileUpload.vdx", $saveOptionsRequest, TestBase::$storageTestFOLDER, "true");
        $json = json_decode($result);
        $this->assertNotEmpty($json->SavedFile);
        TestBase::PrintDebugInfo("TestSaveAsVSTM result:".$result);
    }

    public function testSaveAsSVG()
    {
        $diagramApi = TestBase::getDiagramApi();
        $saveOptionsRequest= new SaveOptionsRequest();
        $saveOptionsRequest->setFileName("FileSaveAs.svg");
        $saveOptionsRequest->setFolder(TestBase::$storageTestFOLDER);
        $saveOptions = new SVGSaveOptions();
        $saveOptions->setQuality(100);
        $saveOptionsRequest->setSaveOptions($saveOptions);
        $result=$diagramApi->saveAs("FileUpload.vdx", $saveOptionsRequest, TestBase::$storageTestFOLDER, "true");
        $json = json_decode($result);
        $this->assertNotEmpty($json->SavedFile);
        TestBase::PrintDebugInfo("TestSaveAsSVG result:".$result);
    }

    public function testSaveAsSWF()
    {
        $diagramApi = TestBase::getDiagramApi();
        $saveOptionsRequest= new SaveOptionsRequest();
        $saveOptionsRequest->setFileName("FileSaveAs.swf");
        $saveOptionsRequest->setFolder(TestBase::$storageTestFOLDER);
        $saveOptions = new SWFSaveOptions();
        $saveOptions->setSaveForegroundPagesOnly(true);
        $saveOptionsRequest->setSaveOptions($saveOptions);
        $result=$diagramApi->saveAs("FileUpload.vdx", $saveOptionsRequest, TestBase::$storageTestFOLDER, "true");
        $json = json_decode($result);
        $this->assertNotEmpty($json->SavedFile);
        TestBase::PrintDebugInfo("TestSaveAsSWF result:".$result);
    }

    public function testSaveAsXPS()
    {
        $diagramApi = TestBase::getDiagramApi();
        $saveOptionsRequest= new SaveOptionsRequest();
        $saveOptionsRequest->setFileName("FileSaveAs.xps");
        $saveOptionsRequest->setFolder(TestBase::$storageTestFOLDER);
        $saveOptions = new XPSSaveOptions();
        $saveOptions->setSaveForegroundPagesOnly(true);
        $saveOptionsRequest->setSaveOptions($saveOptions);
        $result=$diagramApi->saveAs("FileUpload.vdx", $saveOptionsRequest, TestBase::$storageTestFOLDER, "true");
        $json = json_decode($result);
        $this->assertNotEmpty($json->SavedFile);
        TestBase::PrintDebugInfo("TestSaveAsXPS result:".$result);
    }

    public function testSaveAsHTML()
    {
        $diagramApi = TestBase::getDiagramApi();
        $saveOptionsRequest= new SaveOptionsRequest();
        $saveOptionsRequest->setFileName("FileSaveAs.html");
        $saveOptionsRequest->setFolder(TestBase::$storageTestFOLDER);
        $saveOptions = new  HTMLSaveOptions();
        $saveOptions->setTitle("Save HTML Test");
        $saveOptionsRequest->setSaveOptions($saveOptions);
        $result=$diagramApi->saveAs("FileUpload.vdx", $saveOptionsRequest, TestBase::$storageTestFOLDER, "true");
        $json = json_decode($result);
        $this->assertNotEmpty($json->SavedFile);
        $this->assertTrue(count($json->Additionals)>0);
        TestBase::PrintDebugInfo(count($json->Additionals));
        TestBase::PrintDebugInfo("TestSaveAsHTML result:".$result);
    }
}
