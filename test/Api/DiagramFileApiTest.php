<?php
/**
 * DiagramFileApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Aspose\Diagram\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Aspose\Diagram\Cloud;

require_once('ApiTestBase.php');

use Aspose\Diagram\Cloud\Api\DiagramFileApi;
use \Aspose\Diagram\Cloud\Configuration;
use \Aspose\Diagram\Cloud\Model;
use \Aspose\Diagram\Cloud\ObjectSerializer;


/**
 * DiagramFileApiTest Class Doc Comment
 *
 * @category Class
 * @package  Aspose\Diagram\Cloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DiagramFileApiTest extends \PHPUnit_Framework_TestCase
{
    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
        $this->instance = new DiagramFileApi();
        $config = $this->instance->getConfig();
        $token=ApiTestBase::getAccessToken();
        $config ->setAccessToken($token);
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for diagramFileGetDiagram
     *
     * Read document info or export..
     *
     */
    public function testDiagramFileGetDiagram()
    {
        $name ='file_get_1.vdx';
        $folder = "Temp";
        $result = $this->instance->diagramFileGetDiagram($name,"pdf",$folder,null);
        $this->assertGreaterThan(100, $result->getSize());
        //echo ($result->getSize());
    }

    /**
     * Test case for diagramFilePostSaveAs
     *
     * Convert document and save result to storage..
     *
     */
    public function testDiagramFilePostSaveAs()
    {
        $name ='file_get_1.vdx';
        $isOverwrite = 'true';
        $folder= "Temp";
        $format = new \Aspose\Diagram\Cloud\Model\FileFormatRequest();
        $format->setFormat("pdf");
        $newfilename = "file_saveas_php.pdf";
        $result = $this->instance->DiagramFilePostSaveAs($name, $format, $newfilename, $folder, $isOverwrite);
        $json = json_decode($result);
        $this->assertEquals(200, $json->Code);
    }

    /**
     * Test case for diagramFilePutCreate
     *
     * Create new diagram and save result to storage..
     *
     */
    public function testDiagramFilePutCreate()
    {
        $isOverwrite = 'true';
        $folder= "Temp";
        $result = $this->instance->diagramFilePutCreate("file_create_php.vdx",$folder,$isOverwrite);
        $json = json_decode($result);
        $this->assertEquals(200, $json->Code);
    }

    /**
     * Test case for diagramFilePutUpload
     *
     * Upload file and save result to storage..
     *
     */
    public function testDiagramFilePutUpload()
    {
        $name ='file_upload_new_php.vdx';
        $isOverwrite = 'true';
        $folder= "Temp";
        $localFilePath = realpath(__DIR__ . '/../..') . '/testData/php_upload.vsd';
        $result = $this->instance->DiagramFilePutUpload($localFilePath,$name,$folder, $isOverwrite);
        $json = json_decode($result);
        $this->assertEquals(200, $json->Code);
    }

    public function testUpload()
    {
        $name ='file_upload_php1.vsd';
        $folder= "Temp";
        $localFilePath = realpath(__DIR__ . '/../..') . '/testData/php_upload.vsd';
        $result = ApiTestBase::upload($localFilePath,$name,$folder);
        $json = json_decode($result);
        $this->assertEquals(200, $json->Code);
    }
}
